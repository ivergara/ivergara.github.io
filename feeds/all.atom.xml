<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>On data, programming, and technology</title><link href="https://ivergara.github.io/" rel="alternate"></link><link href="https://ivergara.github.io/feeds/all.atom.xml" rel="self"></link><id>https://ivergara.github.io/</id><updated>2019-02-11T11:00:00+01:00</updated><entry><title>Supercharging theÂ shell</title><link href="https://ivergara.github.io/Supercharging-shell.html" rel="alternate"></link><published>2019-02-11T11:00:00+01:00</published><updated>2019-02-11T11:00:00+01:00</updated><author><name>Ignacio Vergara Kausel</name></author><id>tag:ivergara.github.io,2019-02-11:/Supercharging-shell.html</id><summary type="html"></summary><content type="html">&lt;h1&gt;Supercharging the&amp;nbsp;shell&lt;/h1&gt;
&lt;p&gt;I&amp;#8217;m not a real power user of the command line in Linux, but I tend to use it quite regularly and is my intention to improve on that. My first step to become more proficient and increase its use was to start enhancing shell experience. The first action on this regard was to move from &lt;code&gt;bash&lt;/code&gt; to &lt;code&gt;zsh&lt;/code&gt;. With that change I also started useing &lt;code&gt;oh-my-zsh&lt;/code&gt; to manage some goodies like themes, where I tend to gravitate to use something like &lt;code&gt;agnoster&lt;/code&gt; or &lt;code&gt;powerline9k&lt;/code&gt; with very few&amp;nbsp;customizations.&lt;/p&gt;
&lt;p&gt;Recently, I&amp;#8217;ve discovered new &amp;#8220;clones&amp;#8221; of old tools: &lt;code&gt;find&lt;/code&gt;, &lt;code&gt;cat&lt;/code&gt;, &lt;code&gt;ls&lt;/code&gt;, and &lt;code&gt;grep&lt;/code&gt;. They tend to be reimagined tools and not a complete simple clone, considering the changes of computing technology and development &amp;#8220;culture&amp;#8221;. From removed &lt;span class="caps"&gt;IO&lt;/span&gt; constrains, to the pervasive &lt;code&gt;.gitignore&lt;/code&gt; file. And most importantly, in my opinion, with sane defaults providing  aready to use tool out of the box. Also, these four tools are available for Linux, Windows, and&amp;nbsp;macOS.&lt;/p&gt;
&lt;p&gt;For the four commands mentioned before, there is something in common, they&amp;#8217;re implemented in &lt;code&gt;rust&lt;/code&gt;. Personally, I have a strong bias in favor of &lt;code&gt;rust&lt;/code&gt; and I&amp;#8217;d like to learn more of it and eventually become proficient (but that&amp;#8217;s a topic for another&amp;nbsp;time).&lt;/p&gt;
&lt;h2&gt;Replacements&lt;/h2&gt;
&lt;p&gt;I want to quickly and succintly review the tools that &lt;em&gt;replace&lt;/em&gt; the ones already&amp;nbsp;mentioned.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/sharkdp/fd"&gt;&lt;code&gt;fd&lt;/code&gt;&lt;/a&gt; replaces &lt;code&gt;find&lt;/code&gt;. This wasn&amp;#8217;t a tool that I really used, because I never managed to understand and learn how to use it. Now, &lt;code&gt;fd&lt;/code&gt; has quite some advantages, for example being faster (in most cases) and easier to use by making &lt;code&gt;find&lt;/code&gt;&lt;span class="quo"&gt;&amp;#8216;&lt;/span&gt;s most common use pattern the default&amp;nbsp;one.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/sharkdp/bat"&gt;&lt;code&gt;bat&lt;/code&gt;&lt;/a&gt; is a rather modest reinterpretation of &lt;code&gt;cat&lt;/code&gt;. It automatically highlights the content of the file given as input, integrates with git, and shows line numbers. Not much to say, but just a nice&amp;nbsp;improvement.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://the.exa.website"&gt;&lt;code&gt;exa&lt;/code&gt;&lt;/a&gt; replaces &lt;code&gt;ls&lt;/code&gt;. In the website they very clearly exaplain how constraing from 1970 don&amp;#8217;t apply anymore and a reimagined tool could be build. Again, saner default like showing human readable file sizes in the long format and has optinal git&amp;nbsp;awareness.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/BurntSushi/ripgrep"&gt;&lt;code&gt;ripgrep&lt;/code&gt;&lt;/a&gt; is a replacement to &lt;code&gt;grep&lt;/code&gt;. When compared with similar tools in benchmarks it is consistently at the top of the pack. Ignores files based on &lt;code&gt;.gitignore&lt;/code&gt; out of the&amp;nbsp;box.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Fuzzy &amp;#8220;finders&amp;#8221;&amp;nbsp;(filter)&lt;/h2&gt;
&lt;p&gt;Now, what really can supercharge the command line experience is the use of fuzzy finders. The two I&amp;#8217;ve tried are &lt;a href="https://github.com/junegunn/fzf"&gt;&amp;#8216;fzf&amp;#8217;&lt;/a&gt; and &lt;a href="https://github.com/lotabout/skim"&gt;&amp;#8216;skim&amp;#8217;&lt;/a&gt;. Both feel very similar, but &lt;code&gt;fzf&lt;/code&gt; feels much more mature and works very well right out of the box where the installation already sets useful keybindings (&lt;code&gt;ctrl+R&lt;/code&gt; to search the history, &lt;code&gt;ctrl+T&lt;/code&gt; to recursively search and filter from the current directory). Plus it has &lt;a href="https://github.com/junegunn/fzf#fuzzy-completion-for-bash-and-zsh"&gt;fuzzy completion for the comand line&lt;/a&gt;. Moreover, &lt;code&gt;fzf&lt;/code&gt; provides an extensive &lt;a href="https://github.com/junegunn/fzf/wiki/examples"&gt;library of examples&lt;/a&gt; which can be extremely&amp;nbsp;useful.&lt;/p&gt;
&lt;p&gt;Here is when the previous set of tools start to shine, since we can combine them. For example, &lt;code&gt;fzf&lt;/code&gt; and &lt;code&gt;skim&lt;/code&gt; can be configured to use &lt;code&gt;fd&lt;/code&gt; to do the finding and then use &lt;code&gt;bat&lt;/code&gt; to do highlighted&amp;nbsp;previews.&lt;/p&gt;
&lt;h2&gt;Customizations&lt;/h2&gt;
&lt;p&gt;To finish, I&amp;#8217;ll share how all of this plays out in my &lt;code&gt;.zshrc&lt;/code&gt; file&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# aliases&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="nv"&gt;ls&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;exa --group-directories-first&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="nv"&gt;cat&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;bat&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# fzf config&lt;/span&gt;
&lt;span class="c1"&gt;# Default command to use when input is tty&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;FZF_DEFAULT_COMMAND&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;fd --type f --color=always&amp;quot;&lt;/span&gt;
&lt;span class="c1"&gt;# Use ctrl+o to open selected file(s) in VS Code&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;FZF_DEFAULT_OPTS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;--bind=&amp;#39;ctrl-o:execute(code {})+abort&amp;#39;&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;FZF_CTRL_T_COMMAND&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$FZF_DEFAULT_COMMAND&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="c1"&gt;# Using bat as previewer &lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;FZF_CTRL_T_OPTS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;--preview-window &amp;#39;right:60%&amp;#39; --preview &amp;#39;bat --color=always --style=header,grid --line-range :300 {}&amp;#39;&amp;quot;&lt;/span&gt;
&lt;span class="c1"&gt;# Changing from ** to ~~ the trigger for autocompletion in shell&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;FZF_COMPLETION_TRIGGER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;~~&amp;#39;&lt;/span&gt;

&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;SKIM_DEFAULT_COMMAND&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;rg --files || fd || find .&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# modified from mitsuhiko dotfiles to use bat as a previewer&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="nv"&gt;skvi&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;f(){ x=&amp;quot;$(sk --bind &amp;quot;ctrl-p:toggle-preview&amp;quot; --ansi --preview=&amp;quot;bat {} --color=always&amp;quot; --preview-window=right:60%:hidden)&amp;quot;; [[ $? -eq 0 ]] &amp;amp;&amp;amp; vim &amp;quot;$x&amp;quot; || true }; f&amp;#39;&lt;/span&gt;
&lt;span class="c1"&gt;# doing the same for VSCode&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="nv"&gt;skvs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;f(){ x=&amp;quot;$(sk --bind &amp;quot;ctrl-p:toggle-preview&amp;quot; --ansi --preview=&amp;quot;bat {} --color=always&amp;quot; --preview-window=right:60%:hidden)&amp;quot;; [[ $? -eq 0 ]] &amp;amp;&amp;amp; code :w &amp;quot;$x&amp;quot; || true }; f&amp;#39;&lt;/span&gt;

&lt;span class="c1"&gt;# Use fd (https://github.com/sharkdp/fd) instead of the default find&lt;/span&gt;
&lt;span class="c1"&gt;# command for listing path candidates.&lt;/span&gt;
_fzf_compgen_path&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  fd --hidden --follow --exclude &lt;span class="s2"&gt;&amp;quot;.git&amp;quot;&lt;/span&gt; . &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# Use fd to generate the list for directory completion&lt;/span&gt;
_fzf_compgen_dir&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  fd --type d --hidden --follow --exclude &lt;span class="s2"&gt;&amp;quot;.git&amp;quot;&lt;/span&gt; . &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I&amp;#8217;m still experimenting on options and further tweaks, but this provided me already with a nicely working experience. Feel free to get inspired! And there are plenty of other tools out there, try them out and keep&amp;nbsp;improving.&lt;/p&gt;</content><category term="rust"></category><category term="cli"></category><category term="go"></category><category term="fuzzy finder"></category></entry><entry><title>Having fun with dataclasses and abstract baseÂ classes</title><link href="https://ivergara.github.io/ABC-and-dataclasses.html" rel="alternate"></link><published>2019-01-28T10:20:00+01:00</published><updated>2019-01-28T10:20:00+01:00</updated><author><name>Ignacio Vergara Kausel</name></author><id>tag:ivergara.github.io,2019-01-28:/ABC-and-dataclasses.html</id><summary type="html"></summary><content type="html">&lt;!-- Series:  abc and dataclasses --&gt;

&lt;p&gt;Python is well known for the little boilerplate needed to get something to work. But even Python can get a bit cumbersome when a whole bunch of relatively trivial methods have to be defined to get the desired behavior of a class.
In this article we&amp;#8217;re going to explore how to combine &lt;a href="https://docs.python.org/3/library/dataclasses.html"&gt;&lt;code&gt;dataclases&lt;/code&gt;&lt;/a&gt; with the &lt;a href="https://docs.python.org/3.7/library/abc.html"&gt;&lt;code&gt;abc&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://docs.python.org/3.7/library/collections.abc.html"&gt;&lt;code&gt;collections.abc&lt;/code&gt;&lt;/a&gt; modules of the standard library in Python. I&amp;#8217;ll assume that you know/understand what &lt;code&gt;abc&lt;/code&gt;, &lt;code&gt;collections.abc&lt;/code&gt; and &lt;code&gt;dataclases&lt;/code&gt;. With the last two one could get a lot of behavior for &lt;strong&gt;free&lt;/strong&gt;!&lt;/p&gt;
&lt;p&gt;If you don&amp;#8217;t know about abstract base classes then I strongly recommend to check articles like &lt;a href="http://blog.thedigitalcatonline.com/blog/2016/04/03/abstract-base-classes-in-python/"&gt;this&lt;/a&gt; and &lt;a href="http://stupidpythonideas.blogspot.com/2015/07/creating-new-sequence-type-is-easy.html"&gt;this&lt;/a&gt;, for &lt;code&gt;abc&lt;/code&gt;, and &lt;code&gt;abc.collections&lt;/code&gt;, respectivelly. Likewise, if you don&amp;#8217;t know why &lt;code&gt;dataclasses&lt;/code&gt; are interesting and about their advantages, you should check &lt;a href="https://realpython.com/python-data-classes/"&gt;this&lt;/a&gt; other article. Or if you prefer some more visual guide check &lt;a href="https://www.youtube.com/watch?v=epKegvx_Jws"&gt;this&lt;/a&gt; talk. Take the time to learn these tools, it&amp;#8217;ll be worth it. Personally, since I discovered the &lt;code&gt;abc&lt;/code&gt; and &lt;code&gt;collections.abc&lt;/code&gt; modules, I&amp;#8217;ve been trying to use them every time I&amp;nbsp;can. &lt;/p&gt;
&lt;p&gt;When I saw the inclusion of the &lt;code&gt;dataclass&lt;/code&gt; module in the standard library of Python 3.7, I told myself I wanted to use it. Being able to reduce even more the boilerplate in Python seemed like a great idea. Of course I could have already been using &lt;a href="https://www.attrs.org/"&gt;&lt;code&gt;attrs&lt;/code&gt;&lt;/a&gt; for basically the same effect, but when I tried it it didn&amp;#8217;t feel natural. That was most likely due to a lack of experience on my&amp;nbsp;part.&lt;/p&gt;
&lt;p&gt;Thus, it&amp;#8217;s very obvious that I&amp;#8217;d end up mixing abstract classes, abstract collections, and dataclasses eventually at some point. Unfortunatelly, I haven&amp;#8217;t taken the time to refactor the code at work to this effect. To ammend that, I decided to explore the combination of &lt;code&gt;abc+dataclasses&lt;/code&gt; and &lt;code&gt;abc.collections+dataclasses&lt;/code&gt; with a toy example to see how straightforward, or not, the combination works. And since I didn&amp;#8217;t find any article mixing these two concepts (not that I looked too much around), I decided to write about&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;Now, getting our fingers dirty. First let&amp;#8217;s use &lt;code&gt;pipenv&lt;/code&gt; to create an environment (as you should do to keep some environment hygene). It can feel slightly an overkill to do so, but I find it easier than trying to create a virtual environment from scratch. So, we initialize a Python 3.7 environment as follows &lt;code&gt;pipenv --python 3.7&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;To guide this experiment, we&amp;#8217;ll write a simple test. You could for sure skip this and manually play with the code in the &lt;span class="caps"&gt;REPL&lt;/span&gt; of choice, which I&amp;#8217;d recommend in any case in this case to freely explore and discover your use case, but having tests makes the process easier. Install &lt;code&gt;pytest&lt;/code&gt; to run the tests by executing &lt;code&gt;pipenv install pytest&lt;/code&gt;. Note that I&amp;#8217;m not using a separate &lt;code&gt;dev&lt;/code&gt; environment for this, as this is just an experimentation environment. Now, we can activate the virtual environment by using &lt;code&gt;pipenv shell&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The simplest test I can come up with, is that the abstract class &lt;code&gt;Base&lt;/code&gt; should raise a &lt;code&gt;TypeError&lt;/code&gt; exception if you try to instantiate it&amp;nbsp;directly.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# test_demo.py&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pytest&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;demo&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Base&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_abstract_base_class&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raises&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Before executing &lt;code&gt;pytest&lt;/code&gt;, since it&amp;#8217;ll fail, we can quickly write an implementation based on &lt;code&gt;dataclasses&lt;/code&gt; and &lt;code&gt;abc&lt;/code&gt;. As such, the class is decorated with &lt;code&gt;@dataclass&lt;/code&gt; and inherits from &lt;code&gt;abc.ABC&lt;/code&gt;. Furthermore, it&amp;#8217;ll define one field &lt;code&gt;a&lt;/code&gt; of type &lt;code&gt;str&lt;/code&gt; with a &lt;code&gt;__post_init__&lt;/code&gt; and a &lt;code&gt;process&lt;/code&gt; method, the last one defined as&amp;nbsp;abstract.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# demo.py&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;abc&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;dataclasses&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;dataclass&lt;/span&gt;

&lt;span class="nd"&gt;@dataclass&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;abc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ABC&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__post_init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
      &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nd"&gt;@abc.abstractmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So far so good. Since the &lt;code&gt;__post_init__&lt;/code&gt; method is not an abstract one, it&amp;#8217;ll be executed in each class that inherits from &lt;code&gt;Base&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now it&amp;#8217;s time to create a class that implements the abstract class. As it is described in the &lt;a href="https://docs.python.org/3/library/dataclasses.html#inheritance"&gt;reference&lt;/a&gt;, for inheritance in &lt;code&gt;dataclasses&lt;/code&gt; to work, both classes have to be decorated.
In this case, the implementation will define another field, &lt;code&gt;b&lt;/code&gt; of type &lt;code&gt;str&lt;/code&gt;, reimplement the &lt;code&gt;__post_init__&lt;/code&gt; method, and implement the abstract method &lt;code&gt;process&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# demo.py&lt;/span&gt;
&lt;span class="nd"&gt;@dataclass&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Implementation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__post_init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__post_init__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;{self.a} {self.b}&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We&amp;#8217;re reimplementing the &lt;code&gt;__post_init__&lt;/code&gt; method just to show that we could cover more sophisticated use cases easily. This forces us to call &lt;code&gt;super().__post_init__()&lt;/code&gt; to get the post initialization of the base class. Now we can cover the behavior of this new class in a test as&amp;nbsp;follows.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# test_demo.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;demo&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Implementation&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_implementation&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;implemented_instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Implementation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Pythonic&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Musings&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;implemented_instance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;implemented_instance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;PYTHONIC musings&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In this test, the first &lt;code&gt;assert&lt;/code&gt; is to make sure that the &lt;code&gt;Implemented&lt;/code&gt; class is really an instance of &lt;code&gt;Base&lt;/code&gt;. We could have just trusted Python, but since this article has an educational purpose, better to be explicit about our&amp;nbsp;expectations.&lt;/p&gt;
&lt;p&gt;One great advantage of dataclasses is that you&amp;#8217;re forced to do type annotation. So we can see what happens if we run a type checker like &lt;code&gt;mypy&lt;/code&gt; on it. Executing &lt;code&gt;pipenv install mypy&lt;/code&gt; and then &lt;code&gt;mypy .&lt;/code&gt; we get the&amp;nbsp;following&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Only&lt;/span&gt; &lt;span class="n"&gt;concrete&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;can&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;given&lt;/span&gt; &lt;span class="n"&gt;where&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Type[Base]&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;expected&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Only one error! That&amp;#8217;s worse than what we&amp;#8217;d expected. Searching a bit, I found the following &lt;a href="https://github.com/python/mypy/issues/5374"&gt;issue&lt;/a&gt; discussing this situation. Otherwise all checks up fine, and we&amp;#8217;re not interested in &lt;code&gt;mypy&lt;/code&gt;&lt;span class="quo"&gt;&amp;#8216;&lt;/span&gt;s edge cases so we could ignore it, or silence it in case you&amp;#8217;re running &lt;code&gt;mypy&lt;/code&gt; as part of a &lt;span class="caps"&gt;CI&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;At last we reach now to combining &lt;code&gt;dataclasses&lt;/code&gt; and the &lt;code&gt;collections.abc&lt;/code&gt; module. This combination is great since both modules provide ways to reduce boilerplate while also making intent very clear. To keep it simple it&amp;#8217;ll be a straight container with a field &lt;code&gt;c&lt;/code&gt; of type &lt;code&gt;List&lt;/code&gt; and a custom method &lt;code&gt;capitalize&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# demo.py&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;collections.abc&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;

&lt;span class="nd"&gt;@dataclass&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Derived&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;collections&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Container&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__contains__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;capitalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here we get the full power of combining two boilerplate reducing approaches.
This example, by no means shows all the potential of the &lt;code&gt;collections.abc&lt;/code&gt; since we chose the simplest collection possible. But it&amp;#8217;s only here to show that the combination with dataclasses works. I really recommend using the &lt;code&gt;collections.abs&lt;/code&gt; module as it will allows you to encapsulate a lot, and leads to a better&amp;nbsp;design.&lt;/p&gt;
&lt;p&gt;To test it, we can go with the following&amp;nbsp;code&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# test_demo.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;demo&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Derived&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_derived&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Derived&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hi&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Bye&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hi&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Bye&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;

    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;capitalize&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;HI&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;BYE&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The first assertion checks if our method works as intended. The second group of assertions, those inside the &lt;code&gt;for&lt;/code&gt; loop, has only a pedagogical objective since we are ultimately testing that the &lt;code&gt;collections.abs&lt;/code&gt; is working. Although sometimes, such a test is valid to comply with specification. Anyhow, will not go into epistemology of tests in here. Here again we see that the mix of &lt;code&gt;collections.abs&lt;/code&gt; and &lt;code&gt;dataclasses&lt;/code&gt; just&amp;nbsp;works.&lt;/p&gt;
&lt;p&gt;Our implementation of the &lt;code&gt;Derived&lt;/code&gt; class is very rough. As an exercise, try to turn the &lt;code&gt;capitalize&lt;/code&gt; method into a &lt;code&gt;classmethod&lt;/code&gt; that takes an instance of &lt;code&gt;Derived&lt;/code&gt; and returns an instance of the class with the capitalized elements. This would improve the ergonomics, since is not too coherent to return a &lt;code&gt;list&lt;/code&gt; in such an implicit way. Bonus points for proper type annotation! (Hint: check &lt;span class="caps"&gt;PEP&lt;/span&gt;&amp;nbsp;563.)&lt;/p&gt;
&lt;p&gt;With this we conclude the article. Not surprisingly, the &lt;code&gt;dataclasses&lt;/code&gt; module work extremely well together with &lt;code&gt;abc&lt;/code&gt; and &lt;code&gt;collections.abs&lt;/code&gt;. Certainly, after this exploration, I&amp;#8217;ll start using these combinations into the future and going through older code to make use of&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;Teaser: there is another thing in Python I enjoy using, the &amp;#8216;@property&amp;#8217; decorator. Personally, I also wonder how that mixes with &lt;code&gt;dataclasses&lt;/code&gt;, luckily someone already told their story &lt;a href="https://blog.florimondmanca.com/reconciling-dataclasses-and-properties-in-python"&gt;here&lt;/a&gt;. Spoiler alert, has a happy ending ;). Although while playing with it I&amp;#8217;ve found some edge cases where things stop working nicely. I hope to explore it in more detail and show some&amp;nbsp;alternative/solution.&lt;/p&gt;</content><category term="dataclasses"></category><category term="ABC"></category><category term="collections"></category><category term="boilerplate"></category><category term="Python 3.7"></category></entry><entry><title>My âHacktoberâ 2018Â experience</title><link href="https://ivergara.github.io/hackoctober-2018.html" rel="alternate"></link><published>2018-11-06T10:20:00+01:00</published><updated>2018-11-06T10:20:00+01:00</updated><author><name>Ignacio Vergara Kausel</name></author><id>tag:ivergara.github.io,2018-11-06:/hackoctober-2018.html</id><summary type="html">&lt;p&gt;My first experience contributing during&amp;nbsp;Hacktoberfest.&lt;/p&gt;</summary><content type="html">&lt;p&gt;My Hacktoberfest 2018 Experience
Last year I learned rather late about the Hackoctoberfest. This year, wasnât that much different, and I didnât manage to plan ahead on how to participate. But this story would be extremely boring if it ended like&amp;nbsp;this.&lt;/p&gt;
&lt;p&gt;By the end of the month of October, and by chance, I ended up stumbling upon a little project called deon that generates a good practices checklist for data based experiments. Iâll not go into depth about it since they do a great job at explaining what are their&amp;nbsp;objectives.&lt;/p&gt;
&lt;p&gt;More importantly, deon is small in scope and rather simple, but smartly done. One of their issues was to extract all the logic they had placed into the main &lt;span class="caps"&gt;CLI&lt;/span&gt; entrypoint to it own âcoreâ function leaving the &lt;span class="caps"&gt;CLI&lt;/span&gt; as a wrapper around&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;Since this project uses click as a &lt;span class="caps"&gt;CLI&lt;/span&gt; framework and Iâve been using it to learn how to create and organize nice &lt;span class="caps"&gt;CLI&lt;/span&gt; applications I thought âhey, this looks like something that can be done quickly!â. And indeed it was quick, and my contribution was merged&amp;nbsp;promptly.&lt;/p&gt;
&lt;p&gt;Since in my opinion the changes left the test suite a bit badly organized, I did set to change and clean up the test. Repurposing the old tests that were dealing with the &lt;span class="caps"&gt;CLI&lt;/span&gt; directly for the new core, and then creating lightweight &lt;span class="caps"&gt;CLI&lt;/span&gt; testing suite, focusing on the &lt;span class="caps"&gt;CLI&lt;/span&gt; and not on the newly extracted core. Fortunately they were using pytest which I realy like and use it exclusively by now, thus I managed to use some parametrization to reduce lines of code.
The &lt;span class="caps"&gt;PR&lt;/span&gt; was merged after some minor details. Personally, Iâm satisfied with the looks of the test suite, even when there is still room for&amp;nbsp;improvement.&lt;/p&gt;
&lt;p&gt;After this success, I kept looking into the open issues. The second one I found that was more on the technical side is related to offer the creation of the checklist via a web application. Someone already had commented showing interest in implementing it, but that was more than a month earlier and there was no movement in his forked repository. Thus, I decided to start tackling it. Once again, using what Iâve been experimenting with, chose flask to implement a web application with a single endpoint. For now the basic skeleton of my suggested solution is more or less complete and further development would need feedback from the project owners/maintainers. Unfortunatelly the comment on the issue has not been considered, perhaps I should go ahead and try out a pull request&amp;nbsp;directly.&lt;/p&gt;
&lt;p&gt;So, in the end, and without forcing it, I ended contributing a tiny bit into an open source project during October-November. It does even mark my first contribution in code as previously Iâve contributed with some cleaning and docummenting of the test suite in pandas (which I hope to continue at some point). Moreover, I did contribute by using directly what what Iâve been learning since transitioning to being a full time software developer and what Iâve explored&amp;nbsp;personally.&lt;/p&gt;</content><category term="open source"></category></entry><entry><title>What Iâve learned so far - my first sixÂ months</title><link href="https://ivergara.github.io/what-ive-learned-so-far-my-first-six-months.html" rel="alternate"></link><published>2017-12-30T16:20:00+01:00</published><updated>2017-12-30T16:20:00+01:00</updated><author><name>Ignacio Vergara Kausel</name></author><id>tag:ivergara.github.io,2017-12-30:/what-ive-learned-so-far-my-first-six-months.html</id><summary type="html">&lt;p&gt;A list of a bunch of stuff that I&amp;#8217;ve learned during my first six months working at&amp;nbsp;Odoscope.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Soon I&amp;#8217;ll complete my first six months of working as a software developer. Here in Germany, that coincides with the legal trial period. Luckily, the transition from academia to my current job has been extremely smooth, due to a relaxed working atmosphere and particularly due a very scientifically oriented first task. Implementing an evolutionary strategy optimization procedure is something that is very much in the realm of possible Bachelor/Master thesis or a segment of a doctoral work for a&amp;nbsp;physicist.&lt;/p&gt;
&lt;p&gt;Overall, these first six months have been a good learning experience. Most of what I&amp;#8217;ve had to learn can be categorized as &amp;#8220;software engineering&amp;#8217;, like dealing with logs, reliance, deployment, and&amp;nbsp;testing.&lt;/p&gt;
&lt;p&gt;I want to take the opportunity to list and comment a bit on the things I&amp;#8217;ve learned, explored, and played with during this time. Implicitly in this list, is the fact that most of it applies in the context of Python since it&amp;#8217;s the programming language that I know the best&amp;#8230; and since part of my job is rather borderline with data science/analytics, having Pandas available has been a very&amp;nbsp;good.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cassandra&amp;nbsp;basics&lt;/li&gt;
&lt;li&gt;Jenkins base pipeline &lt;span class="caps"&gt;CI&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;HTTP&lt;/span&gt; requests, including asynchronous&amp;nbsp;ones&lt;/li&gt;
&lt;li&gt;Using&amp;nbsp;decorators&lt;/li&gt;
&lt;li&gt;Do better&amp;nbsp;logging&lt;/li&gt;
&lt;li&gt;Type and function annotations in&amp;nbsp;Python&lt;/li&gt;
&lt;li&gt;Build a custom factory for Cassandra that returns a pandas &lt;code&gt;DataFrame&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Some extensive use of &lt;code&gt;pytest&lt;/code&gt; including parametrization, fixtures,&amp;nbsp;mocking&lt;/li&gt;
&lt;li&gt;Selenium basics as a proof of concept to do end-to-end testing of our&amp;nbsp;dashboard&lt;/li&gt;
&lt;li&gt;Using&amp;nbsp;Docker&lt;/li&gt;
&lt;li&gt;Play with binary file formats (&lt;code&gt;arrow&lt;/code&gt;, &lt;code&gt;parquet&lt;/code&gt;) sending them over a&amp;nbsp;network&lt;/li&gt;
&lt;li&gt;Handling config files using &lt;code&gt;ConfigParser&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Use click to create a &lt;span class="caps"&gt;CLI&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Built a &lt;code&gt;Flask&lt;/code&gt; app&lt;/li&gt;
&lt;li&gt;Appreciate Pycharm&amp;#8217;s&amp;nbsp;debugger&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Most likely I&amp;#8217;ve forgotten some minor things, but this is the bulk of it. In the future, I&amp;#8217;ll try to write about some noteworthy elements of this list. Particularly the Flask based access to the cassandra database that returns a pandas dataframe as a parquet file, arrow stream, or pretty rendered &lt;span class="caps"&gt;HTML&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Going forwards, I&amp;#8217;m highly interested in exploring how to improve testing with the &lt;code&gt;hypothesis&lt;/code&gt; library, but still need to find a good case use for it. Also, want to explore the field of statistical programming using &lt;code&gt;pymc3&lt;/code&gt;. Beyond that, hopefully I&amp;#8217;ll start doing some stuff in Go&amp;nbsp;soon.&lt;/p&gt;</content></entry><entry><title>My FirstÂ Post</title><link href="https://ivergara.github.io/my-first-post.html" rel="alternate"></link><published>2017-10-30T16:20:00+01:00</published><updated>2017-10-30T16:20:00+01:00</updated><author><name>Ignacio Vergara Kausel</name></author><id>tag:ivergara.github.io,2017-10-30:/my-first-post.html</id><summary type="html">&lt;p&gt;Kickstarting of the&amp;nbsp;blog.&lt;/p&gt;</summary><content type="html">&lt;p&gt;A few months ago I left academia, working as a research physicist (experimental condensed matter) and started working as a software&amp;nbsp;developer. &lt;/p&gt;
&lt;p&gt;Here I&amp;#8217;d want to expose some discoveries, ideas, projects, and anything else related to computing. Mostly it&amp;#8217;ll be based on python, but it might feature some other languages once I get to explore them. Otherwise, every now and then I&amp;#8217;ll try to feature some science or math oriented stuff and maybe some technology&amp;nbsp;rants.&lt;/p&gt;
&lt;p&gt;Hope to be able to produce somewhat regular&amp;nbsp;content.&lt;/p&gt;</content></entry></feed>